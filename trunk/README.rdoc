= SilverPlatter::IRC


== Indexing
Author::  Stefan Rusterholz <apeiros@gmx.net>
Version:: 1.0.0
Website:: http://silverplatter.rubyforge.org/irc



== Summary
SilverPlatter::IRC is an easy to use library for IRC clients. For an example use
take a look at the butler project: http://butler.rubyforge.org which uses it to
implement an IRC bot.


== Description
FIXME


== Installing
=== Via RubyGems
You need for the installation:
* rubygems >= 1.2.0
* silverplatter-log >= 0.1.0 (automatically installed by rubygems)

You need for some of the rake tasks:
* bacon
* flexmock
* git
* hpricot
* rcov
* rdiscount (or markdown)
* rdoc
* rspec

To install, do:

	gem install silverplatter-irc

Note: you might have to use 'sudo gem install silverplatter-irc'

=== From Github
You need for the installation:
* rubygems >= 1.2.0 (if you want to use any gem tasks)
* hpricot >= 0.6.0 (needed for most rake tasks)
* rdoc >= 2.0.0 (needed for most rake tasks)
* silverplatter-log >= 0.1.0

You need for some of the rake tasks:
* bacon
* flexmock
* git
* hpricot
* rcov
* rdiscount (or markdown)
* rdoc
* rspec

To install, do:

	curl http://github.com/apeiros/silverplatter-irc/tarball/master
	cd trunk
	rake gem:install

Note: you might have to use 'sudo rake gem:install'


== Examples

See in the examples dir for code examples.


== Design
SilverPlatter::IRC is designed in layers, the following layers exist:
Socket::     Provides many abstracted write methods and send-queues to protect your client from
             accidentally flooding (sending too many messages at once)
             Reading messages will only give a string
Connection:: Provides imperative and evented interfaces to reading commands, which additionally are converted
             to IRC::Message's and provide a nicer interface than plain Strings.
             Keeps track of IRC::User's you're talking to (or that talk to you) and IRC::Channel's you're in.
             Both, IRC::User and IRC::Channel are multitons, that means a given user or channel will always
             be represented by the same object.
Client::     Deals with multiple connections

Socket only provides the simplemost functionality and is "dumb" by design (no automatisms).
Connection is sufficient to build a client allowing a connection to a single server at a
time and is semi-intelligent as Parser, Channel and Users are tied to the connection and
automatically updated apropriatly. Also it can properly deal with requests with multiple
commands as reply, collecting those and making them accessible in a nice format.
Client improves further on that as it can have multiple connections, deals with pings
and provides nice mechanisms to get messages dispatched to methods.
	

== Links
SilverPlatter-IRCs home:: http://silverplatter.rubyforge.org/irc
The project site::        http://rubyforge.org/projects/silverplatter
